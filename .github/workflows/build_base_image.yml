name: build OpenDrift base image
# this ensures that we have an image for a specific tag that we want
# this workflow is needed so that our operational tool is always stable 

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'OpenDrift release tag to build from (make sure this is reflected in Dockerfile.base)'
        required: true
        default: v1.11.0
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  envs:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAME: ${{ steps.IMAGE_NAME.outputs.value }}
    steps:
      - name: Set image name
        id: IMAGE_NAME
        run: |
          echo "value=${{ env.REGISTRY }}/saeon/opendrift:${{ inputs.tag }}" >> $GITHUB_OUTPUT

  build-image:
    needs: [envs]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.envs.outputs.IMAGE_NAME }}
      SHA: sha-${{ github.sha }}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
    steps:
      # this step where we cheout the OpenDrift repo for the specific tag totally works but there is a problem-
      # at the time of building, numpy had a major update so the python environment created durnig the image build
      # is not compatible with the opendrift code we are using
      # so we had to create our own Dockerfile.base to create the base image
      # I'm leaving this code here for a future time when we can remove the Dockerfile.base file and 
      # build from the OpenDrift release without the need for any edits
      #- name: Checkout the OpenDrift repository
      #  uses: actions/checkout@main
      #  with:
      #    repository: OpenDrift/opendrift
      #    ref: ${{ inputs.tag }}
      #    token: ${{ secrets.GITHUB_TOKEN }}
      #
      - name: Check out source code
        # this wouldn't be needed if we didn't need to make a small edit to the OpenDrift environment.yml file
        uses: actions/checkout@main 
        with:
          ref: main
      - name: Log in to the Container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.SHA }}
      - name: Build and push
        uses: docker/build-push-action@master
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: ${{ steps.meta.outputs.tags }}
  
#  pull-image-mims1:
#    needs: [envs,build-image]
#    runs-on: mims1
#    steps:
#      - name: pull latest docker image to mims server
#        run: |
#    docker pull ${{ needs.envs.outputs.IMAGE_NAME }}

