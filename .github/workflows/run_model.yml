name: run the model

on:
  workflow_call:
    inputs:
      MODEL_TYPE:
        description: 'what kind of model are we running e.g. oil - a user defined input in run_ops.yml'
        required: true
        type: string
      BRANCH_REF:
        description: 'what branch are we on - defined dynamically in run_ops.yml'
        required: true
        type: string
      CONFIG_NAME:
        description: 'configuration name - defined dynamically in run_ops.yml'
        required: true
        type: string
      RUN_DATE:
        description: 'time of T0 of the croco workflow in format YYYYMMDD_HH - defined dynamically in run_ops.yml'
        required: true
        type: string
      RUNNER_NAME:
        description: 'specify the runner name to determine what server we are running on'
        required: true
        type: string
      WIND:
        description: 'name of wind forcing e.g. GFS' 
        required: true
        type: string
      RUN_MODEL:
        description: 'run the model?'
        required: true
        type: string
      DO_POST:
        description: 'do the postprocessing?'
        required: true
        type: string
      OGCM:
        description: 'name of boundary forcing e.g. MERCATOR' 
        required: true
        type: string
      EXTENTS:
        description: 'spatial extent of the gridded output and plot, in format lon0,lon1,lat0,lat1. If None, then this is dynamically determined from the geographic extent of the particles'
        required: true
        type: string
      DX_M:
        description: 'grid size (m) used to grid particle output. If None, If None, then a 50 x 50 regular grid is generated'
        required: true
        type: string

env:
  # the directory to get mounted when running the docker image
  DATE_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/${{ inputs.RUN_DATE }}
  # path to the run directory, as seen inside the running docker container
  RUN_DIR_DOCKER: /mnt/tmp/opendrift_${{ inputs.MODEL_TYPE }}/${{ inputs.CONFIG_NAME }}/${{ inputs.OGCM }}_${{ inputs.WIND }}
  # path to the run directory, as seen inside the local server 
  RUN_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/${{ inputs.RUN_DATE }}/opendrift_${{ inputs.MODEL_TYPE }}/${{ inputs.CONFIG_NAME }}/${{ inputs.OGCM }}_${{ inputs.WIND }}

jobs:
  setup_config:
    runs-on: ${{ inputs.RUNNER_NAME }}
    steps:
      - name: Check out source code so have access to the files in the repo
        uses: actions/checkout@main
        with:
          ref: ${{ inputs.BRANCH_REF }}

      - name: create the directory
        run: |
          rm -rf ${{ env.RUN_DIR }}  
          mkdir -p ${{ env.RUN_DIR }}

      - name: Copy config file to the local server to run the model
        run: |
          OGCM=${{ inputs.OGCM }}
          WIND=${{ inputs.WIND }} 
          sed -e 's/OGCM/'$OGCM'/g' -e 's/WIND/'$WIND'/g' < configs/config_${{ github.event.inputs.model_type }}.py > ${{ env.RUN_DIR }}/config.py

      - name: add permissions to the config file
        run: |
          chmod -R 774 ${{ env.RUN_DIR }}
        continue-on-error: true

  check_input_files:
    # this is a check to skip running the model if the inputs aren't available
    # this ensures the operational workflow doesn't crash if some of the runs aren't available but others are (e.g. if HYCOM couldn't be downloaded)
    needs: [setup_config]
    runs-on: ${{ inputs.RUNNER_NAME }}
    outputs:
      files_ok: ${{ steps.set-output.outputs.files_ok }}
    steps:
      - name: check input file availability
        id: check
        run: |
          docker run \
            --rm \
            --user root \
            --entrypoint python \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            -v ${{ env.RUN_DIR }}:/mnt/run_dir \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
            -c "
import os, sys, pathlib
             
sys.path.append('/mnt/run_dir')
import config 

missing = []
if config.use_croco:
    croco_files = config.croco_files
    for croco_file in croco_files:
        if not os.path.exists(croco_file):
            missing.append(croco_file)
if config.use_ogcm:
    ogcm_files = config.ogcm_files
    for ogcm_file in ogcm_files:
        if not os.path.exists(ogcm_file):
            missing.append(ogcm_file)
if config.use_wind:
    wind_files = config.wind_files
    for wind_file in wind_files:
        if not os.path.exists(wind_file):
            missing.append(wind_file)

pathlib.Path('/mnt/run_dir/files_ok').write_text('false' if missing else 'true')

if missing:
    print('Run not executed due to missing file(s):')
    for f in missing:
        print('  ', f)
else:
    print('All specified forcing files are present.')
"

      - name: Set job output from file
      id: set-output
      run: |
        echo "files_ok=$(cat ${{ env.RUN_DIR }}/files_ok)" >> $GITHUB_OUTPUT

  run_model:
    needs: [setup_config,check_input_files]
    if: ${{ inputs.RUN_MODEL == 'true' && needs.check_input_files.outputs.files_ok == 'true' }}
    runs-on: ${{ inputs.RUNNER_NAME }}
    steps:
      - name: run the model
        run: |
          # we're specifying --user root due to permission issues I wasn't clever enough to solve
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              run_model \
                --model_type ${{ inputs.MODEL_TYPE }} \
                --config_dir ${{ env.RUN_DIR_DOCKER }}
          # change ownership to somisana user
          sudo chown -R somisana:somisana ${{ env.RUN_DIR }}
  
  # do some postprocessing and plotting
  postprocess:
    needs: [run_model]
    if: ${{ always() && inputs.DO_POST == 'true' && needs.check_input_files.outputs.files_ok == 'true' }}
    uses: ./.github/workflows/postprocess.yml
    with:
      MODEL_TYPE: ${{ inputs.MODEL_TYPE }}
      BRANCH_REF: ${{ inputs.BRANCH_REF }}
      CONFIG_NAME: ${{ inputs.CONFIG_NAME }}
      RUN_DATE: ${{ inputs.RUN_DATE }}
      RUNNER_NAME: ${{ inputs.RUNNER_NAME }}
      WIND: ${{ inputs.WIND }}
      OGCM: ${{ inputs.OGCM }}
      EXTENTS: ${{ inputs.EXTENTS }}
      DX_M: ${{ inputs.DX_M }}
