name: postprocess and plot

on:
  workflow_call:
    inputs:
      MODEL_TYPE:
        description: 'what kind of model are we running e.g. oil - a user defined input in run_ops.yml'
        required: true
        type: string
      BRANCH_REF:
        description: 'what branch are we on - defined dynamically in run_ops.yml'
        required: true
        type: string
      CONFIG_NAME:
        description: 'configuration name - defined dynamically in run_ops.yml'
        required: true
        type: string
      RUN_DATE:
        description: 'time of T0 of the croco workflow in format YYYYMMDD_HH - defined dynamically in run_ops.yml'
        required: true
        type: string
      RUNNER_NAME:
        description: 'specify the runner name to determine what server we are running on'
        required: true
        type: string
      WIND:
        description: 'name of wind forcing e.g. GFS' 
        required: true
        type: string
      OGCM:
        description: 'name of boundary forcing e.g. MERCATOR' 
        required: true
        type: string
      EXTENTS:
        description: 'spatial extent of the gridded output and plot, in format lon0,lon1,lat0,lat1. If None, then this is dynamically determined from the geographic extent of the particles'
        required: true
        type: string
      DX_M:
        description: 'grid size (m) used to grid particle output. If None, If None, then a 50 x 50 regular grid is generated'
        required: true
        type: string


env:
  # the directory to get mounted when running the docker image
  DATE_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/${{ inputs.RUN_DATE }}
  # path to the run directory, as seen inside the running docker container
  RUN_DIR_DOCKER: /mnt/tmp/opendrift_${{ inputs.MODEL_TYPE }}/${{ inputs.CONFIG_NAME }}/${{ inputs.OGCM }}_${{ inputs.WIND }}
  # path to the run directory, as seen inside the local server 
  RUN_DIR: /home/somisana/ops/${{ inputs.BRANCH_REF }}/${{ inputs.RUN_DATE }}/opendrift_${{ inputs.MODEL_TYPE }}/${{ inputs.CONFIG_NAME }}/${{ inputs.OGCM }}_${{ inputs.WIND }}

jobs:
  animate_particles:
    runs-on: ${{ inputs.RUNNER_NAME }}
    steps:
      - name: make animation of the particles
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              animate  \
                --type particles \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
                --extents ${{ inputs.EXTENTS }} \
                --gif_out trajectories.gif

  particle_density:
    runs-on: ${{ inputs.RUNNER_NAME }}
    steps:
      - name: gridded particle density from particles
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              grid_particles  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
                --fname trajectories.nc \
                --fname_gridded gridded_particle_density.nc \
                --grid_type density \
                --extents ${{ inputs.EXTENTS }} \
                --dx_m ${{ inputs.DX_M }}
      - name: animate the gridded particle density
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              animate  \
                --type gridded  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
                --fname_gridded gridded_particle_density.nc \
                --extents ${{ inputs.EXTENTS }} \
                --gif_out gridded_particle_density.gif
      - name: plot maximum gridded particle density
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              animate  \
                --type gridded_stats  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
                --fname_gridded gridded_particle_density.nc \
                --var_str maximum \
                --cbar_label 'max. particle density (%)' \
                --extents ${{ inputs.EXTENTS }} \
                --jpg_out gridded_particle_density_max.jpg
      - name: plot minimum time to arrival
        # this doesn't relate to particle density, but just sneaking it into this job
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              animate  \
                --type gridded_stats  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
                --fname_gridded gridded_particle_density.nc \
                --var_str minimum_time \
                --ticks 0,0.5,1,1.5,2,3,5,7 \
                --cbar_label 'minimum time (days)' \
                --extents ${{ inputs.EXTENTS }} \
                --jpg_out gridded_min_time.jpg

  surface_oil:
    runs-on: ${{ inputs.RUNNER_NAME }}
    if: ${{ inputs.MODEL_TYPE == 'oil' }}
    steps:
      - name: surface oil thickness from particles
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              grid_particles  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
                --fname trajectories.nc \
                --fname_gridded gridded_surface_oil.nc \
                --grid_type surface_oil \
                --extents ${{ inputs.EXTENTS }} \
                --dx_m ${{ inputs.DX_M }}
      - name: animate the surface oil thickness
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              animate  \
                --type gridded  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
                --fname_gridded gridded_surface_oil.nc \
                --extents ${{ inputs.EXTENTS }} \
                --var_str surface_thickness \
                --ticks 0,0.01,0.1,1,10 \
                --cbar_label 'surface oil thickness ($\mu$m)' \
                --cmap Greys \
                --gif_out gridded_surface_oil.gif
      - name: plot maximum surface oil thickness
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              animate  \
                --type gridded_stats  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
                --fname_gridded gridded_surface_oil.nc \
                --extents ${{ inputs.EXTENTS }} \
                --var_str maximum \
                --ticks 0,0.01,0.1,1,10 \
                --cbar_label 'max. surface oil thickness ($\mu$m)' \
                --cmap Greys \
                --jpg_out gridded_surface_oil_max.jpg

  stranded_oil:
    runs-on: ${{ inputs.RUNNER_NAME }}
    if: ${{ inputs.MODEL_TYPE == 'oil' }}
    steps:
      - name: stranded oil concentration from particles
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              grid_particles  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
                --fname trajectories.nc \
                --fname_gridded gridded_stranded_oil.nc \
                --grid_type stranded_oil \
                --extents ${{ inputs.EXTENTS }} \
                --dx_m ${{ inputs.DX_M }}
      - name: plot maximum stranded oil concentration
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              animate  \
                --type gridded_stats  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
                --fname_gridded gridded_stranded_oil.nc \
                --extents ${{ inputs.EXTENTS }} \
                --var_str maximum \
                --ticks 0,10,20,50,100,200,500,1000 \
                --cbar_label 'max. stranded oil (g m$^{-2}$)' \
                --cmap plasma \
                --jpg_out gridded_stranded_oil_max.jpg
  
  oil_mass_balance:
    runs-on: ${{ inputs.RUNNER_NAME }}
    if: ${{ inputs.MODEL_TYPE == 'oil' }}
    steps:
      - name: compute the oil mass balance 
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              oil_massbal  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
      - name: plot the oil mass balance 
        run: |
          docker run \
            --rm \
            --user root \
            -v ${{ env.DATE_DIR }}:/mnt/tmp \
            ghcr.io/saeon/somisana-opendrift_${{ inputs.BRANCH_REF }}:latest \
              plot_budget  \
                --config_dir ${{ env.RUN_DIR_DOCKER }} \
          
  # copy data over to where it will be archived
  archive:
    needs: [animate_particles,particle_density,surface_oil,stranded_oil,oil_mass_balance]
    #plot_grid_oil_surface]
    if: ${{ always() && github.event.inputs.do_post == 'true' }}
    runs-on: ${{ inputs.RUNNER_NAME }}
    env:
      ARCHIVE_DIR: /mnt/saeon-somisana/data/opendrift/${{ inputs.RUN_DATE }}/${{ inputs.CONFIG_NAME }}/${{ inputs.OGCM }}-${{ inputs.WIND }}
    steps:
      - name: copy files to the archive directory if needed
        run: |
          # start by changing ownership of all files to the somisana user
          sudo chown -R somisana:somisana ${{ env.RUN_DIR }}
          # only copy if we're on the main branch
          # we need to use sudo since the archive directory is owned by root
          # we have set up the somisana user to be able to do this without the need for a password
          if [ ${{ inputs.BRANCH_REF }} = "main" ]; then
            if [ ! -d ${{ env.ARCHIVE_DIR }} ]; then
              sudo mkdir -p ${{ env.ARCHIVE_DIR }}
              sudo chmod -R 775 ${{ env.ARCHIVE_DIR }}
            fi
            sudo cp -f ${{ env.RUN_DIR }}/config.py ${{ env.ARCHIVE_DIR }}
            sudo cp -f ${{ env.RUN_DIR }}/*.nc ${{ env.ARCHIVE_DIR }}
            sudo cp -f ${{ env.RUN_DIR }}/*.gif ${{ env.ARCHIVE_DIR }}
            sudo cp -f ${{ env.RUN_DIR }}/*.jpg ${{ env.ARCHIVE_DIR }}
          fi
